untuk membuat custom hook kita buat file terpisah :
misal useFetch.js yang isinya itu ngefetch sesuatu.
nah dalam file itu ada function yang namanya useFetch juga,
ini harus diawali sama use ya kalau mau bikin custom hook,
kalau gak nanti bakal gak jalan. 

isinya kayak gini :

    import { useEffect, useState } from "react";

    const useFetch = (url) => {
      const [error, setError] = useState(null);
      const [isPending, setIsPending] = useState(true);
      const [data, setData] = useState(null);

      useEffect(() => {
        setTimeout(() => {
          fetch(url)
            .then(response => {
              if(!response.ok) {
                throw Error('Connected to resource but response not ok!');
              }
              return response.json();
            })
            .then(data => {
              setData(data);
              setIsPending(false);
              setError(null);
            })
            .catch(err => {
              setIsPending(false);
              setError(err.message);
            });
        }, 1000);
      }, [url]);

      return { error, isPending, data }
    }

    export default useFetch;

si useFetch ini ngereturn 3 data yaitu error, isPending, data
yang diretrun dalam bentuk objek. nah si data itukan ngambil dari
pengolahan state jadi jangan lupa buat deklarasiin penggunaan
state nya di dalam functinnya :

    const [error, setError] = useState(null);
    const [isPending, setIsPending] = useState(true);
    const [data, setData] = useState(null);

terus si useFetch ini punya parameter url yang mana nanti 
bakal jadi endpoint pas ngefetch. terus url ini juga dipake di dependency
useEffect supaya si useEffect cuma jalan pas si useFetch ngejalanin urlnya.
mantep gak tuh ...

terus di halaman pemanggilan hook nya kita panggil : 
    import useFetch from "./useFetch";

pas penggunaannya : 
    const {error, isPending, data: blogs} = useFetch('http://localhost:8000/blogs');

